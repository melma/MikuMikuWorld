//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:4.0.30319.42000
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------

namespace MikuMikuWorld.Properties {
    using System;
    
    
    /// <summary>
    ///   ローカライズされた文字列などを検索するための、厳密に型指定されたリソース クラスです。
    /// </summary>
    // このクラスは StronglyTypedResourceBuilder クラスが ResGen
    // または Visual Studio のようなツールを使用して自動生成されました。
    // メンバーを追加または削除するには、.ResX ファイルを編集して、/str オプションと共に
    // ResGen を実行し直すか、または VS プロジェクトをビルドし直します。
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   このクラスで使用されているキャッシュされた ResourceManager インスタンスを返します。
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("MikuMikuWorld.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   厳密に型指定されたこのリソース クラスを使用して、すべての検索リソースに対し、
        ///   現在のスレッドの CurrentUICulture プロパティをオーバーライドします。
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   #version 420
        ///
        ///const vec3 RGB2Y = vec3(0.299, 0.587, 0.114);
        ///const float EPSILON = 0.00001;
        ///
        ///uniform vec2 resolutionInverse = vec2(1.0 / 1280.0, 1.0 / 720.0);
        ///layout (binding = 0) uniform sampler2D samplerSrc;
        ///
        ///layout (location = 0) out vec4 FragColor;
        ///
        ///void main()
        ///{
        ///	vec2 uv0 = gl_FragCoord.xy * resolutionInverse;
        ///	vec2 uv1 = uv0 + vec2(resolutionInverse.x, 0.0);
        ///	vec2 uv2 = uv0 + vec2(0.0, resolutionInverse.y);
        ///	vec2 uv3 = uv0 + resolutionInverse;
        ///
        ///	float l0 = dot(RGB2Y, texture(samplerSrc [残りの文字列は切り詰められました]&quot;; に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string AverageBright_frag {
            get {
                return ResourceManager.GetString("AverageBright_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   型 System.Drawing.Bitmap のローカライズされたリソースを検索します。
        /// </summary>
        internal static System.Drawing.Bitmap black {
            get {
                object obj = ResourceManager.GetObject("black", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   #version 420
        ///
        ///uniform vec2 resolutionInverse = vec2(1.0 / 1280.0, 1.0 / 720.0);
        ///uniform float intensity = 1.0;
        ///layout (binding = 0) uniform sampler2D samplerSrc;
        ///layout (binding = 1) uniform sampler2D samplerBlur1;
        ///layout (binding = 2) uniform sampler2D samplerBlur2;
        ///layout (binding = 3) uniform sampler2D samplerBlur3;
        ///layout (binding = 4) uniform sampler2D samplerBlur4;
        ///layout (binding = 5) uniform sampler2D samplerBlur5;
        ///
        ///layout (location = 0) out vec4 FragColor;
        ///
        ///void main()
        ///{
        ///	vec2 uv = g [残りの文字列は切り詰められました]&quot;; に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string Bloom_frag {
            get {
                return ResourceManager.GetString("Bloom_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   型 System.Drawing.Bitmap のローカライズされたリソースを検索します。
        /// </summary>
        internal static System.Drawing.Bitmap blue {
            get {
                object obj = ResourceManager.GetObject("blue", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   #version 420
        ///
        ///const float NORMALIZE = 1.0 / (1.0 + 2.0 * ( 0.93 + 0.8 + 0.7 + 0.6 + 0.5 + 0.4 + 0.3 + 0.2 + 0.1 ));
        ///
        ///uniform vec2 resolutionInverse = vec2(1.0 / 1280.0, 1.0 / 720.0);
        ///uniform float radius = 5.0;
        ///layout (binding = 0) uniform sampler2D sampler0;
        ///
        ///layout (location = 0) out vec4 FragColor;
        ///
        ///vec4 gaussianblur(vec2 tex, vec2 dir, sampler2D src)
        ///{
        ///	vec4 color = texture(src, tex);
        ///
        ///	color += (texture(src, tex + dir * 1.0) + texture(src, tex - dir * 1.0)) * 0.93;
        ///	color += (texture(src [残りの文字列は切り詰められました]&quot;; に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string BlurH_frag {
            get {
                return ResourceManager.GetString("BlurH_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   #version 420
        ///
        ///const float NORMALIZE = 1.0 / (1.0 + 2.0 * ( 0.93 + 0.8 + 0.7 + 0.6 + 0.5 + 0.4 + 0.3 + 0.2 + 0.1 ));
        ///
        ///uniform vec2 resolutionInverse = vec2(1.0 / 1280.0, 1.0 / 720.0);
        ///uniform float radius = 5.0;
        ///layout (binding = 0) uniform sampler2D sampler0;
        ///
        ///layout (location = 0) out vec4 FragColor;
        ///
        ///vec4 gaussianblur(vec2 tex, vec2 dir, sampler2D src)
        ///{
        ///	vec4 color = texture(src, tex);
        ///
        ///	color += (texture(src, tex + dir * 1.0) + texture(src, tex - dir * 1.0)) * 0.93;
        ///	color += (texture(src [残りの文字列は切り詰められました]&quot;; に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string BlurV_frag {
            get {
                return ResourceManager.GetString("BlurV_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   #version 420
        ///
        ///const float NORMALIZE = 1.0 / 41.0;
        ///
        ///uniform vec2 resolutionInverse = vec2(1.0 / 1280.0, 1.0 / 720.0);
        ///uniform float focus = 0.2;
        ///uniform vec2 bias = vec2(1.0, 0.0);
        ///uniform vec2 blurMax = vec2(12.0, 8.0);
        ///uniform vec2 nearFar = vec2(0.1, 1000.0);
        ///
        ///
        ///layout (binding = 0) uniform sampler2D samplerSrc;
        ///layout (binding = 1) uniform sampler2D samplerDepth;
        ///
        ///layout (location = 0) out vec4 FragColor;
        ///
        ///float linearize(float depth, float n, float f)
        ///{
        ///	return (2.0 * n * f) / (f + n -  [残りの文字列は切り詰められました]&quot;; に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string BokehDoF_frag {
            get {
                return ResourceManager.GetString("BokehDoF_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   #version 420
        ///
        ///uniform vec4 color = vec4(1.0);
        ///
        ///layout (location = 0) out vec4 FragColor;
        /// 
        ///void main()
        ///{
        ///    FragColor = color;
        ///} に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string Color_frag {
            get {
                return ResourceManager.GetString("Color_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   #version 450
        ///
        ///uniform mat4 MVP;
        ///
        ///layout (std430, binding = 1) readonly buffer Trans {
        ///  mat4 data[];
        ///} gTrans;
        ///
        ///layout (location = 0) in vec3 position;
        ///layout (location = 9) in vec4 boneIndex;
        ///layout (location = 10) in vec4 boneWeight;
        ///
        ///void main()
        ///{
        ///    vec4 p = vec4(0);
        ///	for (int i = 0; i &lt; 4; i++)
        ///	{
        ///		mat4 m = gTrans.data[int(boneIndex[i])];
        ///		p += (m * vec4(position, 1.0)) * boneWeight[i];
        ///	}
        ///	p /= p.w;
        ///	gl_Position = MVP * p;
        ///} に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string Color_vert {
            get {
                return ResourceManager.GetString("Color_vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   #version 420
        ///
        ///require(functions)
        ///
        ///uniform float hue = 0.0f;
        ///uniform float brightness = 1.0f;
        ///uniform float saturation = 1.0f;
        ///uniform float contrast = 1.0f;
        ///uniform vec2 resolutionInverse = vec2(1.0 / 1280.0, 1.0 / 720);
        ///
        ///layout (binding = 0) uniform sampler2D sampler0;
        ///
        ///layout (location = 0) out vec4 FragColor;
        ///
        ///vec3 csb(vec3 color) 
        ///{ 
        ///    // Increase or decrease theese values to adjust r, g and b color channels seperately 
        ///    const float AvgLumR = 0.5; 
        ///    const float AvgLumG = 0.5; 
        /// [残りの文字列は切り詰められました]&quot;; に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string ColorCollect_frag {
            get {
                return ResourceManager.GetString("ColorCollect_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   #version 450
        ///
        ///layout (std430, binding = 0) writeonly buffer DstMorph {
        ///  vec4 dst[];
        ///};
        ///
        ///layout (std430, binding = 1) readonly buffer Morph0 {
        ///  vec4 pos[];
        ///} gMorph0;
        ///
        ///layout (std430, binding = 2) readonly buffer Morph1 {
        ///  vec4 pos[];
        ///} gMorph1;
        ///
        ///layout (std430, binding = 3) readonly buffer Morph2 {
        ///  vec4 pos[];
        ///} gMorph2;
        ///
        ///layout (std430, binding = 4) readonly buffer Morph3 {
        ///  vec4 pos[];
        ///} gMorph3;
        ///
        /////uniform highp ivec4 offset;
        /////uniform highp ivec4 size;
        ///uniform highp vec4 we [残りの文字列は切り詰められました]&quot;; に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string ComputeMorph_comp {
            get {
                return ResourceManager.GetString("ComputeMorph_comp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   #version 450
        ///
        ///#define IKLINK_NUM	8
        ///
        ///layout (std430, binding = 0) writeonly buffer DstTrans {
        ///  mat4 mat[];
        ///} gDstTrans;
        ///
        ///layout (std430, binding = 1) readonly buffer Bone {
        ///  vec4 posAndpParent[];
        ///} gBone;
        ///
        ///layout (std430, binding = 2) readonly buffer Trans {
        ///  mat4 mat[];
        ///} gTrans;
        ///
        ///layout (std430, binding = 3) readonly buffer Rot {
        ///  vec4 ikRot[];
        ///};
        ///
        ///layout (local_size_x = 16, local_size_y = 1, local_size_z = 1) in;
        ///
        ///mat4 createRotate(in vec3 rot)
        ///{
        ///	float cosx = cos(rot.x);
        ///     [残りの文字列は切り詰められました]&quot;; に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string ComputeTransform_comp {
            get {
                return ResourceManager.GetString("ComputeTransform_comp", resourceCulture);
            }
        }
        
        /// <summary>
        ///   型 System.Drawing.Bitmap のローカライズされたリソースを検索します。
        /// </summary>
        internal static System.Drawing.Bitmap defaultNormal {
            get {
                object obj = ResourceManager.GetObject("defaultNormal", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   #version 450
        ///#extension GL_EXT_draw_buffers : enable
        ///
        ///#define VELOCITYMAP
        ///
        ///struct Surface
        ///{
        ///	vec3 pos;
        ///	vec3 wPos;
        ///	vec4 dir;
        ///};
        ///
        ///uniform vec4 diffuse = vec4(1.0);
        ///
        ///layout (binding = 0) uniform samplerCube envMap;
        ///
        ///in Surface In;
        ///
        ///layout (location = 0) out vec4 Albedo;
        ///layout (location = 1) out vec4 WorldPos;
        ///layout (location = 2) out vec4 WorldNormal;
        ///layout (location = 3) out vec4 PhysicalParams;
        ///layout (location = 4) out vec4 F0;
        ///layout (location = 5) out vec4 Depth;
        ///layout (locat [残りの文字列は切り詰められました]&quot;; に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string DeferredBackground_frag {
            get {
                return ResourceManager.GetString("DeferredBackground_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   #version 450
        ///
        ///#define VELOCITYMAP
        ///#define SHADOWMAP
        ///
        ///struct Surface
        ///{
        ///	vec3 pos;
        ///	vec3 wPos;
        ///	vec4 dir;
        ///};
        ///
        ///uniform mat4 MVP;
        ///uniform mat4 OldMVP;
        ///uniform float deltaTime;
        ///
        ///layout (location = 0) in vec3 position;
        ///
        ///out Surface In;
        /// 
        ///void main()
        ///{
        ///	vec4 pos = vec4(position, 1.0);
        ///	vec4 nowPos =  MVP * pos;
        ///
        ///	gl_Position = nowPos;
        ///	In.wPos = nowPos.xyz;
        ///	In.pos = position;
        ///
        ///
        ///#ifdef VELOCITYMAP
        ///	vec4 oldPos = OldMVP * pos;
        ///	In.dir.xy = (nowPos.xy - oldPos.xy);
        ///	In.dir.y *= -1.0; [残りの文字列は切り詰められました]&quot;; に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string DeferredBackground_vert {
            get {
                return ResourceManager.GetString("DeferredBackground_vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   #version 450
        ///#extension GL_EXT_draw_buffers : enable
        ///
        ///#define VELOCITYMAP
        ///#define SHADOWMAP
        ///
        ///struct Surface
        ///{
        ///    vec3 wPos;
        ///	vec4 pos;
        ///	vec4 dir;
        ///	vec3 normal;
        ///	vec3 tangent;
        ///	vec3 binormal;
        ///	vec2 uv;
        ///	vec4 color;
        ///	vec4 shadowCoord1;
        ///	vec4 shadowCoord2;
        ///	vec4 shadowCoord3;
        ///};
        ///
        ///uniform mat4 MIT;
        ///
        ///uniform vec4 diffuse = vec4(1.0);
        ///uniform float metallic = 0.0;
        ///uniform float roughness = 0.7;
        ///uniform vec4 f0 = vec4(1.022, 0.782, 0.344, 1.0);
        ///uniform vec4 uniqueColor = vec4(0.5, 0.5,  [残りの文字列は切り詰められました]&quot;; に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string DeferredPhysical_frag {
            get {
                return ResourceManager.GetString("DeferredPhysical_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   #version 450
        ///
        ///#define VELOCITYMAP
        ///#define SHADOWMAP
        ///
        ///struct Surface
        ///{
        ///    vec3 wPos;
        ///	vec4 pos;
        ///	vec4 dir;
        ///	vec3 normal;
        ///	vec3 tangent;
        ///	vec3 binormal;
        ///	vec2 uv;
        ///	vec4 color;
        ///	vec4 shadowCoord1;
        ///	vec4 shadowCoord2;
        ///	vec4 shadowCoord3;
        ///};
        ///
        ///uniform mat4 M;
        ///uniform mat4 MVP;
        ///uniform mat4 MIT;
        ///uniform mat4 OldMVP;
        ///uniform mat4 shadowMV1;
        ///uniform mat4 shadowMV2;
        ///uniform mat4 shadowMV3;
        ///uniform float deltaTime;
        ///
        ///layout (location = 0) in vec3 position;
        ///layout (location = 1) in vec3 no [残りの文字列は切り詰められました]&quot;; に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string DeferredPhysical_vert {
            get {
                return ResourceManager.GetString("DeferredPhysical_vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   #version 450
        ///
        ///require(functions)
        ///
        ///struct Light
        ///{
        ///	vec3 pos;
        ///	vec3 dir;
        ///	vec4 color;
        ///	float radius;
        ///	float intensity;
        ///	vec3 min;
        ///	vec3 max;
        ///	float innerAngle;
        ///	float outerAngle;
        ///};
        ///
        ///uniform Light wDirLight;
        ///
        ///uniform vec2 resolution = vec2(1280.0, 720.0);
        ///uniform vec2 resolutionInverse = vec2(1.0 / 1280.0, 1.0 / 720.0);
        ///uniform vec2 nearFar = vec2(0.1, 1000.0);
        ///uniform vec3 wCamDir;
        ///uniform vec3 wCamPos;
        ///uniform vec4 gAmbient = vec4(0.3, 0.3, 0.3, 0.0);
        ///uniform float iblIntensity = 1. [残りの文字列は切り詰められました]&quot;; に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string DeferredPhysicalLighting_frag {
            get {
                return ResourceManager.GetString("DeferredPhysicalLighting_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   #version 450
        ///
        ///#define VELOCITYMAP
        ///#define SHADOWMAP
        ///
        ///struct Surface
        ///{
        ///    vec3 wPos;
        ///	vec4 pos;
        ///	vec4 dir;
        ///	vec3 normal;
        ///	vec3 tangent;
        ///	vec3 binormal;
        ///	vec2 uv;
        ///	vec4 color;
        ///	vec4 shadowCoord1;
        ///	vec4 shadowCoord2;
        ///	vec4 shadowCoord3;
        ///};
        ///
        ///uniform mat4 M;
        ///uniform mat4 MVP;
        ///uniform mat4 MIT;
        ///uniform mat4 OldMVP;
        ///uniform mat4 shadowMV1;
        ///uniform mat4 shadowMV2;
        ///uniform mat4 shadowMV3;
        ///uniform float deltaTime;
        ///
        ///layout (std430, binding = 0) readonly buffer Morph {
        ///  vec4 data[];
        ///} g [残りの文字列は切り詰められました]&quot;; に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string DeferredPhysicalSkin_vert {
            get {
                return ResourceManager.GetString("DeferredPhysicalSkin_vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   #version 420
        ///
        ///require(functions)
        ///
        ///struct Light
        ///{
        ///	vec3 pos;
        ///	vec3 dir;
        ///	vec4 color;
        ///	float radius;
        ///	float intensity;
        ///	vec3 min;
        ///	vec3 max;
        ///	float innerAngle;
        ///	float outerAngle;
        ///};
        ///
        ///uniform Light wDirLight;
        ///
        ///uniform vec2 resolutionInverse = vec2(1.0 / 1280.0, 1.0 / 720.0);
        ///uniform vec2 nearFar = vec2(0.1, 1000.0);
        ///uniform vec3 wCamDir;
        ///uniform vec3 wCamPos;
        ///uniform vec4 gAmbient = vec4(0.3, 0.3, 0.3, 0.0);
        ///uniform float iblIntensity = 1.0;
        ///
        ///layout (binding = 0) uniform sampler2D sam [残りの文字列は切り詰められました]&quot;; に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string DeferredToonLighting_frag {
            get {
                return ResourceManager.GetString("DeferredToonLighting_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   #version 420
        ///
        ///uniform vec2 nearFar = vec2(0.1, 1000.0);
        ///
        ///in vec4 pos;
        ///layout( location = 0 ) out vec4 FragColor;
        /// 
        ///float _linearize(float depth, float n, float f)
        ///{
        ///	return (2.0 * n) / (f + n - depth * (f - n));
        ///}
        ///
        ///void main()
        ///{
        ///	//float depth = _linearize(gl_FragCoord.z, nearFar.x, nearFar.y);
        ///
        ///	float depth = pos.z / pos.w;
        ///	depth = depth * 0.5 + 0.5;
        ///	float depth2 = depth * depth;
        ///	float dx = dFdx(depth);
        ///	float dy = dFdy(depth);
        ///	depth2 += 0.25 * (dx * dx + dy * dy);
        ///
        ///    FragColor [残りの文字列は切り詰められました]&quot;; に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string Depth_frag {
            get {
                return ResourceManager.GetString("Depth_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   #version 450
        ///
        ///uniform mat4 MVP;
        ///
        ///layout (std430, binding = 1) readonly buffer Trans {
        ///  mat4 data[];
        ///} gTrans;
        /// 
        ///layout (location = 0) in vec3 position;
        ///layout (location = 9) in vec4 boneIndex;
        ///layout (location = 10) in vec4 boneWeight;
        ///out vec4 pos;
        ///
        ///void main()
        ///{
        ///	vec4 p = vec4(0);
        ///	for (int i = 0; i &lt; 4; i++)
        ///	{
        ///		mat4 m = gTrans.data[int(boneIndex[i])];
        ///		p += (m * vec4(position, 1.0)) * boneWeight[i];
        ///	}
        ///	p /= p.w;
        ///	gl_Position = MVP * p;
        ///	pos = gl_Position;
        ///} に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string Depth_vert {
            get {
                return ResourceManager.GetString("Depth_vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   #version 420
        ///
        ///require(functions)
        ///
        ///uniform vec2 resolutionInverse = vec2(1.0 / 1280.0, 1.0 / 720.0);
        ///uniform vec2 nearFar = vec2(0.1, 1000.0);
        ///uniform float baseDepth = 5.0;
        ///uniform float startDist = 0.0;
        ///uniform float transDist = 5.0;
        ///
        ///layout (binding = 0) uniform sampler2D samplerSrc;
        ///layout (binding = 1) uniform sampler2D samplerBlur;
        ///layout (binding = 2) uniform sampler2D samplerDepth;
        ///
        ///layout (location = 0) out vec4 FragColor;
        ///
        ///void main()
        ///{
        ///	vec2 coord = gl_FragCoord.xy * resolutionIn [残りの文字列は切り詰められました]&quot;; に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string DoF_frag {
            get {
                return ResourceManager.GetString("DoF_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   #version 420
        ///
        ///uniform vec2 resolutionInverse = vec2(1.0 / 1280.0, 1.0 / 720.0);
        ///uniform float threshold = 1.0;
        ///layout (binding = 0) uniform sampler2D samplerSrc;
        ///
        ///layout (location = 0) out vec4 FragColor;
        ///
        ///void main()
        ///{
        ///	vec2 uv = gl_FragCoord.xy * resolutionInverse;
        ///	vec4 color = texture(samplerSrc, uv);
        ///	float m = clamp(max(color.r, max(color.g, color.b)) - threshold, 0.0, 1.0);
        ///	color.rgb = normalize(color.rgb) * m;
        ///	color.rgb = max(color.rgb, vec3(0));
        ///    FragColor = color;
        ///} に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string ExtractHDR_frag {
            get {
                return ResourceManager.GetString("ExtractHDR_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   #version 420
        ///
        ///require(functions)
        ///
        ///struct Surface
        ///{
        ///    vec3 wPos;
        ///	vec3 wNormal;
        ///	vec3 normal;
        ///	vec3 tangent;
        ///	vec3 binormal;
        ///	vec3 tanLightDir;
        ///	vec2 uv;
        ///	vec4 color;
        ///};
        ///
        ///struct DirectionalLight
        ///{
        ///	vec3 dir;
        ///	vec4 color;
        ///	float intensity;
        ///};
        ///
        ///uniform vec4 diffuse = vec4(1.0);
        ///uniform float metallic = 0.0;
        ///uniform float roughness = 0.7;
        ///uniform vec3 f0 = vec3(1.022, 0.782, 0.344);
        ///
        ///uniform vec3 wCamDir = vec3(0.0, 0.0, 1.0);
        ///uniform vec3 wCamPos = vec3(0.0);
        ///
        ///uniform Direction [残りの文字列は切り詰められました]&quot;; に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string FastPhysical_frag {
            get {
                return ResourceManager.GetString("FastPhysical_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   #version 420
        ///
        ///struct Surface
        ///{
        ///    vec3 wPos;
        ///	vec3 wNormal;
        ///	vec3 normal;
        ///	vec3 tangent;
        ///	vec3 binormal;
        ///	vec3 tanLightDir;
        ///	vec2 uv;
        ///	vec4 color;
        ///};
        ///
        ///struct DirectionalLight
        ///{
        ///	vec3 dir;
        ///	vec4 color;
        ///	float intensity;
        ///};
        ///
        ///uniform mat4 M;
        ///uniform mat4 MVP;
        ///uniform mat4 MIT;
        ///
        ///uniform DirectionalLight wDirLight;
        ///
        ///layout (location = 0) in vec3 position;
        ///layout (location = 1) in vec3 normal;
        ///layout (location = 2) in vec4 tangent;
        ///layout (location = 3) in vec4 color;
        ///layout (locat [残りの文字列は切り詰められました]&quot;; に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string FastPhysical_vert {
            get {
                return ResourceManager.GetString("FastPhysical_vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   
        ///#pragma optionNV(inline all)
        ///#pragma optionNV(fastmath on)
        /////#pragma optionNV(fastprecision on)
        /////#pragma optionNV(ifcvt none)
        /////#pragma optionNV(strict on)
        /////#pragma optionNV(unroll all)
        ///
        ///#define _PI			3.141592653589793
        ///#define _PI2		6.283185307179586
        ///#define _PIOVER2	1.570796326794895
        ///#define _PIOVER3	1.047197551196597
        ///#define _PIOVER4	0.785398163397447
        ///#define _PIOVER6	0.523598775598298
        ///#define _OVERPI		0.318309886183791
        ///#define _GAMMA		0.454545454545454
        ///
        ///float saturate(float value) { r [残りの文字列は切り詰められました]&quot;; に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string Functions {
            get {
                return ResourceManager.GetString("Functions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   #version 420
        ///
        ///#define FXAA_REDUCE_MIN (1.0/128.0)
        ///#define FXAA_REDUCE_MUL (1.0/8.0)
        ///#define FXAA_SPAN_MAX 8.0
        ///
        ///uniform vec2 resolutionInverse = vec2(1.0 / 1280.0, 1.0 / 720);
        ///layout (binding = 0) uniform sampler2D sampler0;
        ///
        ///layout (location = 0) out vec4 FragColor;
        ///
        ///vec4 fxaa(vec2 uv, sampler2D src)
        ///{
        ///	vec3 rgbNW = texture2D(sampler0, uv + (vec2(-1.0,-1.0) * resolutionInverse)).xyz;
        ///	vec3 rgbNE = texture2D(sampler0, uv + (vec2(1.0,-1.0) * resolutionInverse)).xyz;
        ///	vec3 rgbSW = texture2D(samp [残りの文字列は切り詰められました]&quot;; に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string FXAA_frag {
            get {
                return ResourceManager.GetString("FXAA_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   #version 420
        ///
        ///uniform vec2 resolutionInverse = vec2(1.0 / 1280.0, 1.0 / 720.0);
        ///uniform float intensity = 1.0;
        ///layout (binding = 0) uniform sampler2D samplerSrc;
        ///layout (binding = 1) uniform sampler2D samplerBlur1;
        ///layout (binding = 2) uniform sampler2D samplerBlur2;
        ///layout (binding = 3) uniform sampler2D samplerBlur3;
        ///layout (binding = 4) uniform sampler2D samplerBlur4;
        ///layout (binding = 5) uniform sampler2D samplerBlur5;
        ///layout (binding = 6) uniform sampler2D samplerBlur6;
        ///layout (binding = 7)  [残りの文字列は切り詰められました]&quot;; に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string Glare_frag {
            get {
                return ResourceManager.GetString("Glare_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   #version 420
        ///
        ///const float NORMALIZE = 1.0 / (1.0 + 2.0 * ( 0.93 + 0.8 + 0.7 + 0.6 + 0.5 + 0.4 + 0.3 + 0.2 + 0.1 ));
        ///
        ///uniform vec2 resolutionInverse = vec2(1.0 / 1280.0, 1.0 / 720.0);
        ///uniform float radius = 5.0;
        ///uniform vec2 direction = vec2(1.0, 0.0);
        ///layout (binding = 0) uniform sampler2D sampler0;
        ///
        ///layout (location = 0) out vec4 FragColor;
        ///
        ///vec4 gaussianblur(sampler2D src, vec2 uv, vec2 dir)
        ///{
        ///	vec4 color = texture2D(src, uv);
        ///
        ///	color += (texture(src, uv + dir * 1.0) + texture(src, uv - dir [残りの文字列は切り詰められました]&quot;; に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string GlareLine_frag {
            get {
                return ResourceManager.GetString("GlareLine_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   #version 420
        ///
        ///const float NORMALIZE = 1.0 / (1.0 + 4.0 * ( 0.93 + 0.8 + 0.7 + 0.6 + 0.5 + 0.4 + 0.3 + 0.2 + 0.1 ));
        ///
        ///uniform vec2 resolutionInverse = vec2(1.0 / 1280.0, 1.0 / 720.0);
        ///uniform float radius = 5.0;
        ///uniform vec2 direction = vec2(1.0, 0.0);
        ///layout (binding = 0) uniform sampler2D sampler0;
        ///
        ///layout (location = 0) out vec4 FragColor;
        ///
        ///vec4 gaussianblur(sampler2D src, vec2 uv, vec2 dir)
        ///{
        ///	vec4 color = texture2D(src, uv);
        ///
        ///	color += (texture(src, uv + dir * 1.0) + texture(src, uv - dir [残りの文字列は切り詰められました]&quot;; に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string GlarePlus_frag {
            get {
                return ResourceManager.GetString("GlarePlus_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   #version 420
        ///
        ///const float NORMALIZE = 1.0 / (1.0 + 6.0 * ( 0.93 + 0.8 + 0.7 + 0.6 + 0.5 + 0.4 + 0.3 + 0.2 + 0.1 ));
        ///
        ///uniform vec2 resolutionInverse = vec2(1.0 / 1280.0, 1.0 / 720.0);
        ///uniform float radius = 5.0;
        ///uniform vec2 direction = vec2(1.0, 0.0);
        ///layout (binding = 0) uniform sampler2D sampler0;
        ///
        ///layout (location = 0) out vec4 FragColor;
        ///
        ///vec4 gaussianblur(sampler2D src, vec2 uv, vec2 dir)
        ///{
        ///	vec4 color = texture2D(src, uv);
        ///
        ///	color += (texture(src, uv + dir * 1.0) + texture(src, uv - dir [残りの文字列は切り詰められました]&quot;; に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string GlareStar_frag {
            get {
                return ResourceManager.GetString("GlareStar_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   型 System.Drawing.Bitmap のローカライズされたリソースを検索します。
        /// </summary>
        internal static System.Drawing.Bitmap green {
            get {
                object obj = ResourceManager.GetObject("green", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   #version 400
        /// 
        ///uniform mat4 MVP;
        /// 
        ///layout (location = 0) in vec3 position;
        ///
        ///void main()
        ///{
        ///	gl_Position = MVP * vec4(position, 1.0);
        ///} に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string ImageEffect_vert {
            get {
                return ResourceManager.GetString("ImageEffect_vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   #version 420
        ///
        ///const float COEF[9] = { 1.0, 1.0, 1.0, 1.0, -8.0, 1.0, 1.0, 1.0, 1.0};
        ///const vec2 OFFSET[9] = { vec2(-1.0, -1.0), vec2(0.0, -1.0), vec2(1.0, -1.0), vec2(-1.0, 0.0), vec2(0.0, 0.0), vec2(1.0, 0.0), vec2(-1.0, 1.0), vec2(0.0, 1.0), vec2(1.0, 1.0) };
        ///
        ///uniform vec2 resolutionInverse;
        ///uniform float edgeWidth = 2.0;
        ///uniform float threshold = 0.6;
        ///
        ///layout (binding = 0) uniform sampler2D samplerSrc;
        ///
        ///layout (location = 0) out vec4 FragColor;
        ///
        ///vec4 laplacian(vec2 tex, sampler2D src)
        ///{
        ///	v [残りの文字列は切り詰められました]&quot;; に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string Laplacian_frag {
            get {
                return ResourceManager.GetString("Laplacian_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   #version 450
        ///
        ///uniform int index = -1;
        ///uniform vec2 resolution = vec2(1280.0 / 16.0, 768.0 / 16.0);
        ///
        ///layout (std430, binding = 3) buffer LightCount {
        ///  int data[];
        ///} gLightCount;
        ///
        ///layout (std430, binding = 4) buffer LightIndex {
        ///  int data[];
        ///} gLightIndex;
        ///
        ///
        ///layout (location = 0) out vec4 FragColor;
        /// 
        ///void main()
        ///{
        ///	vec2 indices = gl_FragCoord.xy;
        ///	int sx = int(resolution.x);
        ///	int sy = int(resolution.y);
        ///	int x = int(indices.x);
        ///	int y = int(indices.y);
        ///
        ///	int idx = (y * sx) + x;
        ///	in [残りの文字列は切り詰められました]&quot;; に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string LightCulling_frag {
            get {
                return ResourceManager.GetString("LightCulling_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   #version 450
        ///
        ///uniform mat4 MVP;
        ///
        ///layout (location = 0) in vec3 position;
        ///
        ///void main()
        ///{
        ///	gl_Position = MVP * vec4(position, 1.0);
        ///} に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string LightCulling_vert {
            get {
                return ResourceManager.GetString("LightCulling_vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   #version 420
        ///
        ///in vec4 Color;
        ///layout( location = 0 ) out vec4 FragColor;
        /// 
        ///void main()
        ///{
        ///    FragColor = Color;
        ///} に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string Line_frag {
            get {
                return ResourceManager.GetString("Line_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   #version 400
        ///
        ///uniform mat4 MVP;
        ///uniform vec4 color;
        ///
        ///layout (location = 0) in vec3 position;
        ///layout (location = 3) in vec4 inColor;
        ///
        ///out vec4 Color;
        /// 
        ///void main()
        ///{
        ///    gl_Position = MVP * vec4(position, 1.0);
        ///	Color = inColor * color;
        ///} に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string Line_vert {
            get {
                return ResourceManager.GetString("Line_vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   #version 420
        ///
        ///uniform vec2 resolutionInverse = vec2(1.0 / 1280.0, 1.0 / 720.0);
        ///uniform int length = 8;
        ///layout (binding = 0) uniform sampler2D samplerSrc;
        ///layout (binding = 1) uniform sampler2D samplerVelocity;
        ///layout (binding = 2) uniform sampler2D samplerDepth;
        ///
        ///layout (location = 0) out vec4 FragColor;
        ///
        ///void main()
        ///{
        ///	vec2 uv = gl_FragCoord.xy * resolutionInverse;
        ///	vec4 dir = texture(samplerVelocity, uv);
        ///	dir.xy = (dir.xy - vec2(0.5)) * 2.0;
        ///	dir.y *= -1.0;
        ///	//dir.xy = clamp(dir.xy, vec2 [残りの文字列は切り詰められました]&quot;; に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string MotionBlur_frag {
            get {
                return ResourceManager.GetString("MotionBlur_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   #version 420
        ///
        ///uniform vec2 resolutionInverse = vec2(1.0 / 1280.0, 1.0 / 720);
        ///layout (binding = 0) uniform sampler2D sampler0;
        ///layout (binding = 1) uniform sampler2D sampler1;
        ///
        ///layout (location = 0) out vec4 FragColor;
        ///
        ///void main()
        ///{
        ///	vec2 coord = gl_FragCoord.xy * resolutionInverse.xy;
        ///    FragColor = texture(sampler0, coord) * texture(sampler1, coord);
        ///} に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string Mul_frag {
            get {
                return ResourceManager.GetString("Mul_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   型 System.Drawing.Bitmap のローカライズされたリソースを検索します。
        /// </summary>
        internal static System.Drawing.Bitmap negx2 {
            get {
                object obj = ResourceManager.GetObject("negx2", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   型 System.Drawing.Bitmap のローカライズされたリソースを検索します。
        /// </summary>
        internal static System.Drawing.Bitmap negy2 {
            get {
                object obj = ResourceManager.GetObject("negy2", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   型 System.Drawing.Bitmap のローカライズされたリソースを検索します。
        /// </summary>
        internal static System.Drawing.Bitmap negz2 {
            get {
                object obj = ResourceManager.GetObject("negz2", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   #version 450
        ///
        ///require(functions)
        ///
        ///replace(POINT_LIGHT_NUM)
        ///replace(SPOT_LIGHT_NUM)
        ///
        ///struct Surface
        ///{
        ///    vec3 wPos;
        ///	vec3 wNormal;
        ///	vec3 normal;
        ///	vec3 tangent;
        ///	vec3 binormal;
        ///	vec2 uv;
        ///	vec4 color;
        ///	vec4 shadowCoord1;
        ///	vec4 shadowCoord2;
        ///	vec4 shadowCoord3;
        ///};
        ///
        ///struct Light
        ///{
        ///	vec3 pos;
        ///	vec3 dir;
        ///	vec4 color;
        ///	float radius;
        ///	float intensity;
        ///	vec3 min;
        ///	vec3 max;
        ///	float innerAngle;
        ///	float outerAngle;
        ///};
        ///
        ///uniform mat4 MIT;
        ///
        ///uniform vec4 diffuse = vec4(1.0);
        ///uniform floa [残りの文字列は切り詰められました]&quot;; に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string Physical_frag {
            get {
                return ResourceManager.GetString("Physical_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   #version 450
        ///
        ///struct Surface
        ///{
        ///    vec3 wPos;
        ///	vec3 wNormal;
        ///	vec3 normal;
        ///	vec3 tangent;
        ///	vec3 binormal;
        ///	vec2 uv;
        ///	vec4 color;
        ///	vec4 shadowCoord1;
        ///	vec4 shadowCoord2;
        ///	vec4 shadowCoord3;
        ///};
        ///
        ///uniform mat4 M;
        ///uniform mat4 MVP;
        ///uniform mat4 MIT;
        ///uniform mat4 shadowMV1;
        ///uniform mat4 shadowMV2;
        ///uniform mat4 shadowMV3;
        ///
        ///layout (std430, binding = 0) readonly buffer Morph {
        ///  vec4 data[];
        ///} gMorph;
        ///
        ///layout (std430, binding = 1) readonly buffer Trans {
        ///  mat4 data[];
        ///} gTrans;
        ///
        ///layou [残りの文字列は切り詰められました]&quot;; に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string Physical_vert {
            get {
                return ResourceManager.GetString("Physical_vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   型 System.Drawing.Bitmap のローカライズされたリソースを検索します。
        /// </summary>
        internal static System.Drawing.Bitmap posx2 {
            get {
                object obj = ResourceManager.GetObject("posx2", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   型 System.Drawing.Bitmap のローカライズされたリソースを検索します。
        /// </summary>
        internal static System.Drawing.Bitmap posy2 {
            get {
                object obj = ResourceManager.GetObject("posy2", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   型 System.Drawing.Bitmap のローカライズされたリソースを検索します。
        /// </summary>
        internal static System.Drawing.Bitmap posz2 {
            get {
                object obj = ResourceManager.GetObject("posz2", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   型 System.Drawing.Bitmap のローカライズされたリソースを検索します。
        /// </summary>
        internal static System.Drawing.Bitmap red {
            get {
                object obj = ResourceManager.GetObject("red", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   ../MikuMikuWorldLib/Settings.xml に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string SettingsPath {
            get {
                return ResourceManager.GetString("SettingsPath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   #version 420
        ///
        ///struct Surface
        ///{
        ///    vec3 wPos;
        ///	vec4 shadowCoord1;
        ///	vec4 shadowCoord2;
        ///	vec4 shadowCoord3;
        ///};
        ///
        ///uniform vec3 wCamPos = vec3(0.0);
        ///
        ///uniform float shadowBias1 = 0.001;
        ///uniform float shadowBias2 = 0.001;
        ///uniform float shadowBias3 = 0.0004;
        ///uniform float shadowAtten = 0.25;
        ///
        ///layout (binding = 0) uniform sampler2D shadowMap1;
        ///layout (binding = 1) uniform sampler2D shadowMap2;
        ///layout (binding = 2) uniform sampler2D shadowMap3;
        ///
        ///in Surface In;
        ///layout( location = 0 ) out vec4 Fra [残りの文字列は切り詰められました]&quot;; に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string Shadow_frag {
            get {
                return ResourceManager.GetString("Shadow_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   #version 420
        ///
        ///struct Surface
        ///{
        ///    vec3 wPos;
        ///	vec4 shadowCoord1;
        ///	vec4 shadowCoord2;
        ///	vec4 shadowCoord3;
        ///};
        ///
        ///uniform mat4 M;
        ///uniform mat4 MVP;
        ///uniform mat4 shadowMV1;
        ///uniform mat4 shadowMV2;
        ///uniform mat4 shadowMV3;
        ///
        ///layout (location = 0) in vec3 position;
        ///
        ///out Surface In;
        /// 
        ///void main()
        ///{
        ///	gl_Position = MVP * vec4(position, 1.0);
        ///	In.wPos = (M * vec4(position, 1.0)).xyz;
        ///	In.shadowCoord1 = shadowMV1 * vec4(position, 1.0);
        ///	In.shadowCoord2 = shadowMV2 * vec4(position, 1.0);
        ///	In.shad [残りの文字列は切り詰められました]&quot;; に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string Shadow_vert {
            get {
                return ResourceManager.GetString("Shadow_vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   #version 450
        ///
        ///uniform vec2 resolutionInverse = vec2(1.0 / 320.0, 1.0 / 180.0);
        ///uniform vec2 offset = vec2(1.0 / 1280.0, 1.0 / 720.0);
        ///
        ///layout (std430, binding = 6) buffer Lum {
        ///  float data[];
        ///} gLum;
        ///
        ///layout (binding = 0) uniform sampler2D samplerSrc;
        ///
        ///layout (location = 0) out vec4 FragColor;
        ///
        ///void main()
        ///{
        ///	vec2 uv = gl_FragCoord.xy * resolutionInverse;
        ///
        ///	vec4 t0 = texture(samplerSrc, uv + offset * vec2(0.0, 0.0));
        ///	vec4 t1 = texture(samplerSrc, uv + offset * vec2(1.0, 0.0));
        ///	vec4 t2  [残りの文字列は切り詰められました]&quot;; に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string Shrink_frag {
            get {
                return ResourceManager.GetString("Shrink_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   #version 420
        ///
        ///require(functions)
        ///
        ///const float COEF_H[9] = { 1.0, 0.0, -1.0, 2.0, 0.0, -2.0, 1.0, 0.0, -1.0 };
        ///const float COEF_V[9] = { 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, -1.0, -2.0, -1.0 };
        ///const vec2 OFFSET[9] = { vec2(-1.0, -1.0), vec2(0.0, -1.0), vec2(1.0, -1.0), vec2(-1.0, 0.0), vec2(0.0, 0.0), vec2(1.0, 0.0), vec2(-1.0, 1.0), vec2(0.0, 1.0), vec2(1.0, 1.0) };
        ///
        ///uniform vec2 resolutionInverse = vec2(1.0 / 1280.0, 1.0 / 720.0);
        ///uniform float edgeWidth = 2.0;
        ///uniform float threshold = 0.99;
        ///
        ///layout [残りの文字列は切り詰められました]&quot;; に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string Sobel_frag {
            get {
                return ResourceManager.GetString("Sobel_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   #version 420
        ///
        ///require(functions)
        ///
        ///const float COEF_H[9] = { 1.0, 0.0, -1.0, 2.0, 0.0, -2.0, 1.0, 0.0, -1.0 };
        ///const float COEF_V[9] = { 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, -1.0, -2.0, -1.0 };
        ///const vec2 OFFSET[9] = { vec2(-1.0, -1.0), vec2(0.0, -1.0), vec2(1.0, -1.0), vec2(-1.0, 0.0), vec2(0.0, 0.0), vec2(1.0, 0.0), vec2(-1.0, 1.0), vec2(0.0, 1.0), vec2(1.0, 1.0) };
        ///
        ///uniform vec2 resolutionInverse = vec2(1.0 / 1280.0, 1.0 / 720.0);
        ///uniform float edgeWidth = 2.0;
        ///uniform float threshold = 0.001;
        ///uniform [残りの文字列は切り詰められました]&quot;; に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string SobelEdge_frag {
            get {
                return ResourceManager.GetString("SobelEdge_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   #version 420
        ///
        ///uniform vec4 color = vec4(1.0);
        ///
        ///layout (location = 0) out vec4 FragColor0;
        ///
        ///void main()
        ///{
        ///	FragColor0 = color;
        ///} に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string SolidColor_frag {
            get {
                return ResourceManager.GetString("SolidColor_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   #version 420
        ///
        ///uniform mat4 MVP;
        ///
        ///layout (location = 0) in vec3 position;
        ///
        ///void main()
        ///{
        ///	gl_Position = MVP * vec4(position, 1.0);
        ///} に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string SolidColor_vert {
            get {
                return ResourceManager.GetString("SolidColor_vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   #version 420
        ///
        ///#define SSAO_SAMPLES	64
        ///
        ///uniform vec2 resolutionInverse = vec2(1.0 / 1280.0, 1.0 / 720);
        ///uniform float radius = 8.0;
        ///uniform float ignoreDist = 0.3;
        ///uniform float attenPower = 3.0;
        ///
        ///layout (binding = 0) uniform sampler2D samplerSrc;
        ///layout (binding = 1) uniform sampler2D samplerDepth;
        ///
        ///layout (location = 0) out vec4 FragColor;
        ///
        ///float radicalInverse_VdC(uint bits)
        ///{
        ///    bits = (bits &lt;&lt; 16u) | (bits &gt;&gt; 16u);
        ///    bits = ((bits &amp; 0x55555555u) &lt;&lt; 1u) | ((bits &amp; 0xAAAAAAAAu) &gt;&gt; 1u); [残りの文字列は切り詰められました]&quot;; に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string SSAO_frag {
            get {
                return ResourceManager.GetString("SSAO_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   #version 420
        ///
        ///#define SSAO_SAMPLES 6
        ///#define OVERPI 0.31830988
        ///
        ///uniform vec2 resolutionInverse = vec2(1.0 / 1280.0, 1.0 / 720);
        ///uniform float radius = 2.0;
        ///uniform float depthBias = 0.08;
        ///uniform float strength = 1.0;
        ///uniform vec2 nearFar = vec2(0.1, 1000.0);
        ///
        ///layout (binding = 0) uniform sampler2D samplerSrc;
        ///layout (binding = 1) uniform sampler2D samplerDepth;
        ///
        ///layout (location = 0) out vec4 FragColor;
        ///
        ///vec2 poissonDisk2[12] = vec2[](
        ///  vec2(-.326,-.406),
        ///  vec2(-.840,-.074),
        ///  vec2(-.6 [残りの文字列は切り詰められました]&quot;; に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string SSAOUE4_frag {
            get {
                return ResourceManager.GetString("SSAOUE4_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   #version 420
        ///
        ///uniform vec2 resolution = vec2(1280.0, 720.0);
        ///uniform vec2 resolutionInverse = vec2(1.0 / 1280.0, 1.0 / 720.0);
        ///uniform vec2 nearFar = vec2(0.1, 1000.0);
        ///uniform float mxlength = 100.0;
        ///uniform float radius = 1.0;
        ///uniform float raylength = 1.0;
        ///uniform float aoscatter = 1.0;
        ///uniform float cdm = 1.0;
        ///uniform float strength = 1.0;
        ///uniform float coeff = 0.85;
        ///uniform mat4 V;
        ///
        ///layout (binding = 0) uniform sampler2D samplerSrc;
        ///layout (binding = 1) uniform sampler2D samplerDepth;
        ///l [残りの文字列は切り詰められました]&quot;; に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string SSDO_frag {
            get {
                return ResourceManager.GetString("SSDO_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   #version 420
        ///
        ///const float NORMALIZE = 1.0 / 41.0;
        ///
        ///uniform vec2 resolutionInverse = vec2(1.0 / 1280.0, 1.0 / 720.0);
        ///uniform vec2 nearFar = vec2(0.1, 1000.0);
        ///uniform float strength = 1.0;
        ///
        ///layout (binding = 0) uniform sampler2D samplerSrc;
        ///layout (binding = 1) uniform sampler2D samplerAO;
        ///
        ///layout (location = 0) out vec4 FragColor;
        ///
        ///void main()
        ///{
        ///	vec2 texcoord = gl_FragCoord.xy * resolutionInverse;
        ///
        ///	vec4 col = vec4(0.0);
        ///	col += texture(samplerAO, coord);
        ///    col += texture(samplerAO, c [残りの文字列は切り詰められました]&quot;; に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string SSDOBlur_frag {
            get {
                return ResourceManager.GetString("SSDOBlur_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   型 System.Drawing.Bitmap のローカライズされたリソースを検索します。
        /// </summary>
        internal static System.Drawing.Bitmap test {
            get {
                object obj = ResourceManager.GetObject("test", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   #version 420
        ///
        ///layout (binding = 0) uniform sampler2D albedoMap;
        ///
        ///layout (location = 0) in vec4 color;
        ///layout (location = 1) in vec2 uv;
        ///layout( location = 0 ) out vec4 FragColor;
        /// 
        ///void main()
        ///{
        ///    FragColor = color * texture2D(albedoMap, uv);
        ///} に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string Test_frag {
            get {
                return ResourceManager.GetString("Test_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   型 System.Drawing.Bitmap のローカライズされたリソースを検索します。
        /// </summary>
        internal static System.Drawing.Bitmap test_normal {
            get {
                object obj = ResourceManager.GetObject("test_normal", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   #version 420
        ///
        ///struct BoneWeight
        ///{
        ///	float boneIndex0;
        ///	float boneIndex1;
        ///	float boneIndex2;
        ///	float boneIndex3;
        ///	float weight0;
        ///	float weight1;
        ///	float weight2;
        ///	float weight3;
        ///};
        /// 
        ///uniform mat4 MIT;
        ///uniform mat4 MVP;
        ///uniform vec4 diffuse = vec4(1.0);
        ///uniform vec4 ambient = vec4(0.0);
        ///
        ///uniform vec3 lightDir = vec3(-1, -1, 1);
        /// 
        ///layout (location = 0) in vec3 position;
        ///layout (location = 1) in vec3 normal;
        ///layout (location = 2) in vec4 tangent;
        ///layout (location = 3) in vec4 color;
        ///layout [残りの文字列は切り詰められました]&quot;; に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string Test_vert {
            get {
                return ResourceManager.GetString("Test_vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   型 System.Drawing.Bitmap のローカライズされたリソースを検索します。
        /// </summary>
        internal static System.Drawing.Bitmap test1 {
            get {
                object obj = ResourceManager.GetObject("test1", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   #version 420
        ///
        ///uniform vec4 color = vec4(1.0);
        ///
        ///layout( binding = 0) uniform sampler2D tex0;
        ///
        ///in vec2 texcoord;
        ///layout( location = 0 ) out vec4 FragColor;
        /// 
        ///void main()
        ///{
        ///    FragColor = texture2D(tex0, texcoord) * color;
        ///} に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string Texture_frag {
            get {
                return ResourceManager.GetString("Texture_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   #version 400
        ///
        ///#define LAYER_NUM	65536.0
        ///
        ///uniform vec4 srcRect = vec4(0, 0, 1.0, 1.0);
        ///uniform vec4 dstRect = vec4(0, 0, 1.0, 1.0);
        ///uniform float layer;
        ///uniform float flipY = 0.0;
        ///
        ///uniform mat4 MVP;
        ///
        ///layout (location = 0) in vec3 position;
        ///layout (location = 4) in vec2 uv;
        ///
        ///out vec2 texcoord;
        ///
        ///vec2 fit_tex(vec2 v, vec4 rect)
        ///{
        ///	v *= rect.zw;
        ///	v += rect.xy;
        ///	v.y += 1.0 - rect.w;
        ///	v.y = mix(v.y, 1.0 - v.y, flipY);
        ///	return v;
        ///}
        ///
        ///vec2 fit_pos(vec2 v, vec4 rect)
        ///{
        ///	v = (v + 1.0) * 0.5;
        /// [残りの文字列は切り詰められました]&quot;; に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string Texture_vert {
            get {
                return ResourceManager.GetString("Texture_vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   #version 400
        ///
        ///#define LAYER_NUM	65536.0
        ///
        ///uniform float layer;
        ///uniform float flipY = 0.0;
        ///
        ///uniform mat4 MVP;
        ///
        ///layout (location = 0) in vec3 position;
        ///layout (location = 4) in vec2 uv;
        ///
        ///out vec2 texcoord;
        /// 
        ///void main()
        ///{
        ///    gl_Position = MVP * vec4(position.xy, (layer / LAYER_NUM), 1.0);
        ///	float v = mix(uv.y, 1.0 - uv.y, flipY);
        ///	texcoord = vec2(uv.x, v);
        ///} に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string Texture2_vert {
            get {
                return ResourceManager.GetString("Texture2_vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   #version 420
        ///
        ///require(functions)
        ///
        ///uniform vec4 color = vec4(1.0);
        ///uniform float contrast = 1.0;
        ///uniform float saturation = 1.0;
        ///uniform float brightness = 1.0;
        ///
        ///layout (binding = 0) uniform samplerCube tex0;
        ///
        ///in vec3 pos;
        ///
        ///layout (location = 0) out vec4 FragColor;
        /// 
        ///void main()
        ///{
        ///	vec4 col = texture(tex0, pos * vec3(-1.0, 1.0, 1.0)) * color;
        ///	col.rgb = _csb(col.rgb, contrast, saturation, brightness);
        ///	FragColor = col;
        ///} に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string TextureCube_frag {
            get {
                return ResourceManager.GetString("TextureCube_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   #version 420
        ///
        ///uniform mat4 MVP;
        ///
        ///layout (location = 0) in vec3 position;
        ///
        ///out vec3 pos;
        /// 
        ///void main()
        ///{
        ///    gl_Position = MVP * vec4(position, 1);
        ///	pos = position;
        ///} に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string TextureCube_vert {
            get {
                return ResourceManager.GetString("TextureCube_vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   #version 450
        ///
        ///const vec3 RGB2Y   = vec3( 0.299,  0.587,  0.114);
        ///const vec3 RGB2Cb  = vec3(-0.168, -0.331,  0.500);
        ///const vec3 RGB2Cr  = vec3( 0.500, -0.418, -0.081);
        ///const vec3 YCbCr2R = vec3( 1.000,  0.000,  1.402);
        ///const vec3 YCbCr2G = vec3( 1.000, -0.344, -0.714);
        ///const vec3 YCbCr2B = vec3( 1.000,  1.772,  0.000);
        ///
        ///uniform vec2 resolutionInverse = vec2(1.0 / 1280.0, 1.0 / 720.0);
        ///uniform float intensity = 0.5;
        ///uniform float rate;
        ///
        ///layout (std430, binding = 6) buffer Lum {
        ///  float data[];
        /// [残りの文字列は切り詰められました]&quot;; に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string ToneMapping_frag {
            get {
                return ResourceManager.GetString("ToneMapping_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   型 System.Drawing.Bitmap のローカライズされたリソースを検索します。
        /// </summary>
        internal static System.Drawing.Bitmap toon {
            get {
                object obj = ResourceManager.GetObject("toon", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   #version 420
        ///
        ///require(functions)
        ///
        ///struct Surface
        ///{
        ///    vec3 wPos;
        ///	vec3 wNormal;
        ///	vec2 uv;
        ///	vec4 color;
        ///};
        ///
        ///struct DirectionalLight
        ///{
        ///	vec3 dir;
        ///	vec4 color;
        ///	float intensity;
        ///};
        ///
        ///uniform vec4 diffuse = vec4(1.0);
        ///uniform vec4 specular = vec4(0.5);
        ///uniform float shininess = 5.0;
        ///
        ///uniform vec3 wCamDir = vec3(0.0, 0.0, 1.0);
        ///uniform vec3 wCamPos = vec3(0.0);
        ///
        ///uniform DirectionalLight wDirLight;
        ///
        ///uniform vec4 gAmbient = vec4(0.7, 0.7, 0.7, 0.0);
        ///uniform float contrast = 1.0;
        ///unifo [残りの文字列は切り詰められました]&quot;; に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string Toon_frag {
            get {
                return ResourceManager.GetString("Toon_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   #version 420
        ///
        ///struct Surface
        ///{
        ///    vec3 wPos;
        ///	vec3 wNormal;
        ///	vec2 uv;
        ///	vec4 color;
        ///};
        ///
        ///uniform mat4 M;
        ///uniform mat4 MVP;
        ///uniform mat4 MIT;
        ///
        ///layout (location = 0) in vec3 position;
        ///layout (location = 1) in vec3 normal;
        ///layout (location = 3) in vec4 color;
        ///layout (location = 4) in vec2 uv;
        ///
        ///out Surface In;
        /// 
        ///void main()
        ///{
        ///	gl_Position = MVP * vec4(position, 1.0);
        ///
        ///	In.wPos = vec3(M * vec4(position, 1.0));
        ///	In.wNormal = normalize(mat3(MIT) * normal);
        ///	In.uv = uv;
        ///	In.color = color; [残りの文字列は切り詰められました]&quot;; に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string Toon_vert {
            get {
                return ResourceManager.GetString("Toon_vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   型 System.Drawing.Bitmap のローカライズされたリソースを検索します。
        /// </summary>
        internal static System.Drawing.Bitmap toon2 {
            get {
                object obj = ResourceManager.GetObject("toon2", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   #version 420
        ///
        ///require(functions)
        ///
        ///struct Surface
        ///{
        ///    vec3 wPos;
        ///	vec3 wNormal;
        ///	vec2 uv;
        ///	vec4 color;
        ///	vec4 shadowCoord1;
        ///	vec4 shadowCoord2;
        ///	vec4 shadowCoord3;
        ///};
        ///
        ///struct DirectionalLight
        ///{
        ///	vec3 dir;
        ///	vec4 color;
        ///	float intensity;
        ///};
        ///
        ///uniform vec4 diffuse = vec4(1.0);
        ///uniform vec4 specular = vec4(0.5);
        ///uniform float shininess = 5.0;
        ///uniform vec4 uniqueColor = vec4(1.0);
        ///
        ///uniform vec3 wCamDir = vec3(0.0, 0.0, 1.0);
        ///uniform vec3 wCamPos = vec3(0.0);
        ///
        ///uniform DirectionalLight [残りの文字列は切り詰められました]&quot;; に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string ToonShadow_frag {
            get {
                return ResourceManager.GetString("ToonShadow_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   #version 420
        ///
        ///struct Surface
        ///{
        ///    vec3 wPos;
        ///	vec3 wNormal;
        ///	vec2 uv;
        ///	vec4 color;
        ///	vec4 shadowCoord1;
        ///	vec4 shadowCoord2;
        ///	vec4 shadowCoord3;
        ///};
        ///
        ///uniform mat4 M;
        ///uniform mat4 MVP;
        ///uniform mat4 MIT;
        ///uniform mat4 shadowMV1;
        ///uniform mat4 shadowMV2;
        ///uniform mat4 shadowMV3;
        ///
        ///layout (location = 0) in vec3 position;
        ///layout (location = 1) in vec3 normal;
        ///layout (location = 3) in vec4 color;
        ///layout (location = 4) in vec2 uv;
        ///
        ///out Surface In;
        /// 
        ///void main()
        ///{
        ///	gl_Position = MVP * vec4(po [残りの文字列は切り詰められました]&quot;; に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string ToonShadow_vert {
            get {
                return ResourceManager.GetString("ToonShadow_vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   #version 420
        ///
        ///layout (location = 0) in vec4 dir;
        ///
        ///layout (location = 0) out vec4 FragColor;
        ///
        ///void main()
        ///{
        ///	vec4 color;
        ///	color.xy = dir.xy;
        ///	color.z = 1.0;
        ///	color.w = dir.z / dir.w;
        ///	
        ///	FragColor = color;
        ///} に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string Velocity_frag {
            get {
                return ResourceManager.GetString("Velocity_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   #version 450
        ///
        ///uniform mat4 MVP;
        ///uniform mat4 OldMVP;
        ///uniform mat4 MIT;
        ///uniform float deltaTime;
        ///
        ///layout (std430, binding = 1) readonly buffer Trans {
        ///  mat4 data[];
        ///} gTrans;
        ///
        ///layout (std430, binding = 2) readonly buffer OldTrans {
        ///  mat4 data[];
        ///} gOldTrans;
        ///
        ///layout (location = 0) in vec3 position;
        ///layout (location = 1) in vec3 normal;
        ///layout (location = 9) in vec4 boneIndex;
        ///layout (location = 10) in vec4 boneWeight;
        ///
        ///layout (location = 0) out vec4 outDir;
        ///
        ///void main()
        ///{
        ///	vec4 pos  [残りの文字列は切り詰められました]&quot;; に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string Velocity_vert {
            get {
                return ResourceManager.GetString("Velocity_vert", resourceCulture);
            }
        }
        
        /// <summary>
        ///   型 System.Drawing.Bitmap のローカライズされたリソースを検索します。
        /// </summary>
        internal static System.Drawing.Bitmap white {
            get {
                object obj = ResourceManager.GetObject("white", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   #version 400
        ///
        ///uniform vec4 color;
        ///
        ///layout( location = 0 ) out vec4 FragColor;
        /// 
        ///void main()
        ///{
        ///    FragColor = color;
        ///} に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string Wireframe_frag {
            get {
                return ResourceManager.GetString("Wireframe_frag", resourceCulture);
            }
        }
        
        /// <summary>
        ///   #version 400
        /// 
        ///uniform mat4 MVP;
        /// 
        ///layout (location = 0) in vec3 position;
        ///
        ///void main()
        ///{
        ///    gl_Position = MVP * vec4(position, 1.0);
        ///} に類似しているローカライズされた文字列を検索します。
        /// </summary>
        internal static string Wireframe_vert {
            get {
                return ResourceManager.GetString("Wireframe_vert", resourceCulture);
            }
        }
    }
}
